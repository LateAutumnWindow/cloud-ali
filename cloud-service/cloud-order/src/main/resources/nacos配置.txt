# spring:
#   shardingsphere:
#     props:
#       sql.show: true
#     datasource:
#       names: ds0,ds1
#       ds0:
#         type: com.zaxxer.hikari.HikariDataSource
#         driver-class-name: com.mysql.jdbc.Driver
#         jdbc-url: jdbc:mysql://192.168.40.199:3316/ds0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
#         username: root
#         password: 123456
#       ds1:
#         type: com.zaxxer.hikari.HikariDataSource
#         driver-class-name: com.mysql.jdbc.Driver
#         jdbc-url: jdbc:mysql://192.168.40.199:3316/ds1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
#         username: root
#         password: 123456
#     sharding:
#       default-database-strategy:
#         inline:
#           sharding-column: user_id
#           algorithm-expression: ds$->{user_id % 2}
#       # 绑定逻辑表
#       binding-tables: t_order
#       # 广播表
#       broadcast-tables: t_dict,storage_0,account_0
#       tables:
#         t_order:
#           actual-data-nodes: ds$->{0..1}.t_order_$->{0..1}
#           table-strategy:
#             inline:
#               sharding-column: order_id
#               algorithm-expression: t_order_$->{order_id % 2}
#           key-generator:
#             column: order_id
#             type: SNOWFLAKE
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://192.168.40.199:3316/ds0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
    driver-class-name: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 60000
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    filters: stat,wall,log4j
    maxPoolPreparedStatementPerConnectionSize: 20
    useGlobalDataSourceStat: true
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500

feign:
  hystrix:
    enabled: false
logging:
  level:
    io:
      seata: INFO
    com.alibaba.nacos.client.config.impl: WARN

# Redisson 配置 -------------------------------------------------------------
redisson:
  address: "redis://192.168.40.199:6369"
  password:

# MyBatis 配置 -------------------------------------------------------------
# mybatis:
#   mapperLocations: classpath:mapper/*.xml
#   typeAliasesPackage: com.yan.cloud.dao
#   configuration:
#     map-underscore-to-camel-case: true
# MyBatis-Plus 配置 -------------------------------------------------------------
mybatis-plus:
  #  datasource: dataSource
  mapper-locations: classpath:/mapper/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  type-aliases-package:  com.yan.cloud.pojo
  #typeEnumsPackage: com.baomidou.springboot.entity.enums
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID", 4:"该类型为未设置主键类型", 5:"字符串全局唯一ID";
    id-type: 2
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 1
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 0
    logic-not-delete-value: 1
    # SQL 解析缓存，开启后多租户 @SqlParser 注解生效
    sql-parser-cache: true
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
  configuration-properties:
    #设置全局属性用于控制数据库的类型
    dbType: mysql
# Seata 配置 -------------------------------------------------------------
seata:
  enabled: true
  applicationId: raw-order
  config:
    type: nacos
    nacos:
      server-addr: 192.168.40.199:8848
      group: "SEATA_GROUP"
      namespace: ""
      username: "nacos"
      password: "nacos"
  enableAutoDataSourceProxy: true
  txServiceGroup: my_order_test_tx_group
  registry:
    type: nacos
    nacos:
      server-addr: 192.168.40.199:8848
      group: "SEATA_GROUP"
      namespace: ""
      username: "nacos"
      password: "nacos"
      application: seata-server